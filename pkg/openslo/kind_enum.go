// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package openslo

import (
	"fmt"
	"strings"
)

const (
	KindSLO                     Kind = "SLO"
	KindSLI                     Kind = "SLI"
	KindDataSource              Kind = "DataSource"
	KindService                 Kind = "Service"
	KindAlertPolicy             Kind = "AlertPolicy"
	KindAlertCondition          Kind = "AlertCondition"
	KindAlertNotificationTarget Kind = "AlertNotificationTarget"
)

var ErrInvalidKind = fmt.Errorf("not a valid Kind, try [%s]", strings.Join(_KindNames, ", "))

var _KindNames = []string{
	string(KindSLO),
	string(KindSLI),
	string(KindDataSource),
	string(KindService),
	string(KindAlertPolicy),
	string(KindAlertCondition),
	string(KindAlertNotificationTarget),
}

// KindNames returns a list of possible string values of Kind.
func KindNames() []string {
	tmp := make([]string, len(_KindNames))
	copy(tmp, _KindNames)
	return tmp
}

// KindValues returns a list of the values for Kind
func KindValues() []Kind {
	return []Kind{
		KindSLO,
		KindSLI,
		KindDataSource,
		KindService,
		KindAlertPolicy,
		KindAlertCondition,
		KindAlertNotificationTarget,
	}
}

// String implements the Stringer interface.
func (x Kind) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Kind) IsValid() bool {
	_, err := ParseKind(string(x))
	return err == nil
}

var _KindValue = map[string]Kind{
	"SLO":                     KindSLO,
	"SLI":                     KindSLI,
	"DataSource":              KindDataSource,
	"Service":                 KindService,
	"AlertPolicy":             KindAlertPolicy,
	"AlertCondition":          KindAlertCondition,
	"AlertNotificationTarget": KindAlertNotificationTarget,
}

// ParseKind attempts to convert a string to a Kind.
func ParseKind(name string) (Kind, error) {
	if x, ok := _KindValue[name]; ok {
		return x, nil
	}
	return Kind(""), fmt.Errorf("%s is %w", name, ErrInvalidKind)
}

// MarshalText implements the text marshaller method.
func (x Kind) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Kind) UnmarshalText(text []byte) error {
	tmp, err := ParseKind(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
