package v1

import (
	"slices"

	"gopkg.in/yaml.v3"

	"github.com/OpenSLO/OpenSLO/pkg/openslo"
)

const APIVersion = openslo.VersionV1

var supportedKinds = []openslo.Kind{
	openslo.KindSLO,
	openslo.KindSLI,
	openslo.KindDataSource,
	openslo.KindService,
	openslo.KindAlertPolicy,
	openslo.KindAlertCondition,
	openslo.KindAlertNotificationTarget,
}

func GetSupportedKinds() []openslo.Kind {
	return slices.Clone(supportedKinds)
}

type Metadata struct {
	Name        string      `yaml:"name"                  json:"name"`
	DisplayName string      `yaml:"displayName,omitempty" json:"displayName,omitempty"`
	Labels      Labels      `                             json:"labels,omitempty"`
	Annotations Annotations `                             json:"annotations,omitempty"`
}

type Labels map[string]Label

type Annotations map[string]string

type Label []string

func (a *Label) UnmarshalYAML(value *yaml.Node) error {
	var multi []string
	if err := value.Decode(&multi); err != nil {
		var single string
		if err = value.Decode(&single); err != nil {
			return err
		}
		*a = []string{single}
	} else {
		*a = multi
	}
	return nil
}

type RawMessage struct {
	raw  []byte     `yaml:"" json:""`
	node *yaml.Node `yaml:"" json:""`
}

// DeepCopyInto manually copies the receiver into out.
func (in *RawMessage) DeepCopyInto(out *RawMessage) {
	if in == nil || out == nil {
		return
	}
	*out = *in
	if in.raw != nil {
		out.raw = make([]byte, len(in.raw))
		copy(out.raw, in.raw)
	}
	if in.node != nil {
		out.node = deepCopyYAMLNode(in.node)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RawMessage.
func (in *RawMessage) DeepCopy() *RawMessage {
	if in == nil {
		return nil
	}
	out := new(RawMessage)
	in.DeepCopyInto(out)
	return out
}

// deepCopyYAMLNode creates a deep copy of a yaml.Node.
func deepCopyYAMLNode(node *yaml.Node) *yaml.Node {
	if node == nil {
		return nil
	}
	copy := *node
	if node.Content != nil {
		copy.Content = make([]*yaml.Node, len(node.Content))
		for i, n := range node.Content {
			copy.Content[i] = deepCopyYAMLNode(n)
		}
	}
	return &copy
}
